


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             oscode, CODE, READONLY
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;Includes definitions required for OS_InitContextSwitche
                       r
    5 00000000                 INCLUDE          my_Constants.s
    1 00000000                 AREA             My_Constants, CODE, READONLY
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;defining addresses here for practice
    5 00000000         
    6 00000000         ;general base addresses
    7 00000000 40059000 
                       AHB_PORTB
                               EQU              0x40059000
    8 00000000 40058000 
                       AHB_PORTA
                               EQU              0x40058000
    9 00000000 400FE000 
                       SYS_CONTROL
                               EQU              0x400FE000
   10 00000000 E000E000 
                       SYS_PERIPH
                               EQU              0xE000E000
   11 00000000 40030000 
                       TIMER16_0
                               EQU              0x40030000
   12 00000000 40034000 
                       TIMER16_4
                               EQU              0x40034000
   13 00000000 4000C000 
                       UART0   EQU              0x4000C000
   14 00000000 4000D000 
                       UART1   EQU              0x4000D000
   15 00000000         
   16 00000000         ;offsets
   17 00000000         ;RCGC Run-time offsets
   18 00000000 00000608 
                       RCGCGPIO
                               EQU              0x608
   19 00000000 00000604 
                       RCGCTIMER
                               EQU              0x604
   20 00000000 00000618 
                       RCGCUART
                               EQU              0x618
   21 00000000         ;GPIO offsets
   22 00000000 0000006C 
                       GPIOHBCTL
                               EQU              0x06C
   23 00000000 0000052C 
                       GPIOCTL EQU              0x52C
   24 00000000 00000400 
                       GPIODIR EQU              0X400
   25 00000000 00000420 
                       GPIOAFSEL
                               EQU              0X420
   26 00000000 00000500 
                       GPIODR2R



ARM Macro Assembler    Page 2 


                               EQU              0X500
   27 00000000 00000510 
                       GPIOPUR EQU              0X510
   28 00000000 0000051C 
                       GPIODEN EQU              0X51C
   29 00000000 0000052C 
                       GPIOPCTL
                               EQU              0x52C
   30 00000000 00000080 
                       GPIODATAPB5
                               EQU              0x080       ; 0x3FC
   31 00000000         ;SysTick offsets
   32 00000000 00000010 
                       STCTRL  EQU              0X010
   33 00000000 00000014 
                       STRELOAD
                               EQU              0X014
   34 00000000 00000018 
                       STCURRENT
                               EQU              0X018
   35 00000000 00000D20 
                       SYSPRI3 EQU              0XD20
   36 00000000         ;System Clock offsets
   37 00000000 00000060 
                       RCC     EQU              0X060
   38 00000000         ;NVIC offsets
   39 00000000 00000100 
                       NVIC_ENn
                               EQU              0x100
   40 00000000 00000180 
                       NVIC_DISn
                               EQU              0x180
   41 00000000 00000440 
                       NVIC_PRIn
                               EQU              0x440
   42 00000000         ;Timer offsets
   43 00000000 0000000C 
                       GPTMCTL EQU              0x00C
   44 00000000 00000000 
                       GPTMCFG EQU              0x000
   45 00000000 00000004 
                       GPTMTAMR
                               EQU              0x004
   46 00000000 00000008 
                       GPTMTBMR
                               EQU              0x008
   47 00000000 00000028 
                       GPTMTAILR
                               EQU              0x028
   48 00000000 0000002C 
                       GPTMTBILR
                               EQU              0x02C
   49 00000000 00000038 
                       GPTMTAPR
                               EQU              0x038
   50 00000000 0000003C 
                       GPTMTBPR
                               EQU              0x03C
   51 00000000 00000018 



ARM Macro Assembler    Page 3 


                       GPTMIMR EQU              0x018
   52 00000000 0000001C 
                       GPTMRIS EQU              0x01C
   53 00000000 00000024 
                       GPTMICR EQU              0x024
   54 00000000 00000050 
                       GPTMTAV EQU              0X050
   55 00000000 00000054 
                       GPTMTBV EQU              0x054
   56 00000000 00000048 
                       GPTMTAR EQU              0x048
   57 00000000 0000004C 
                       GPTMTBR EQU              0x04C
   58 00000000 00000020 
                       GPTMMIS EQU              0x020
   59 00000000         ;UART offsets
   60 00000000 00000FC8 
                       UARTCC  EQU              0xFC8
   61 00000000 00000030 
                       UARTCTL EQU              0x030
   62 00000000 00000024 
                       UARTIBRD
                               EQU              0x024
   63 00000000 00000028 
                       UARTFBRD
                               EQU              0x028
   64 00000000 0000002C 
                       UARTLCRH
                               EQU              0x02C
   65 00000000 00000018 
                       UARTFR  EQU              0x018
   66 00000000 00000004 
                       UARTRSR EQU              0x004
   67 00000000 00000034 
                       UARTIFLS
                               EQU              0x034
   68 00000000 0000003C 
                       UARTRIS EQU              0x03C
   69 00000000 00000038 
                       UARTIM  EQU              0x038
   70 00000000 00000040 
                       UARTMIS EQU              0x040
   71 00000000 00000044 
                       UARTICR EQU              0x044
   72 00000000 00000000 
                       UARTDR  EQU              0x000
   73 00000000         
   74 00000000         ;FIFO constants
   75 00000000         ;ALIGN 2
   76 00000000 00000010 
                       SIZE    EQU              16
   77 00000000 00000001 
                       SUCCESS EQU              1
   78 00000000 00000000 
                       FAIL    EQU              0
   79 00000000         
   80 00000000         ;GPIODATA Toggle bits
   81 00000000 00000020 
                       GPIOP5  EQU              0x20



ARM Macro Assembler    Page 4 


   82 00000000         
   83 00000000                 END
    6 00000000         
    7 00000000                 IMPORT           tcbsArray   ;import array
    8 00000000                 IMPORT           RunThread   ;import pointer
    9 00000000         
   10 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   11 00000000         ;;;;;;     Initialization functions      ;;;;;;;;;;;;;;;
                       ;;;
   12 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   13 00000000         
   14 00000000         ;This function sets up the systemclock with PIOSC 16MHz
   15 00000000         ;Change this if you wish to use a different clock, with 
                       divisor, etc
   16 00000000         OS_InitClock
                               PROC
   17 00000000                 EXPORT           OS_InitClock
   18 00000000         
   19 00000000         ;Save context
   20 00000000 B510            PUSH             {r4, LR}
   21 00000002         
   22 00000002 4856            LDR              r0, =SYS_CONTROL
   23 00000004 6E01            LDR              r1,[r0, #RCC]
   24 00000006         
   25 00000006         ;Set OSCRC. Select PIOSC
   26 00000006         ;AND r1, r1, #(3<<4) ;clear bits 5 and 4. Change to BIC
   27 00000006 F36F 1105       BFC              r1, #4, #2
   28 0000000A F041 0110       ORR              r1, r1, #(1<<4) ;OSCRC to set P
                                                            IOSC as System cloc
                                                            k
   29 0000000E         
   30 0000000E         ;Set BYPASS. 
   31 0000000E         ;AND r1, r1, #(0<<11) ;clear bit 11
   32 0000000E F36F 21CB       BFC              r1, #11, #1
   33 00000012 F441 6100       ORR              r1, r1, #(1<<11) ;BYPASS to set
                                                             system clock to OS
                                                            C
   34 00000016         
   35 00000016         ;Set USESYSDIV. Selects no division
   36 00000016         ;AND r1, r1, #(0<<22) ;clear it 22
   37 00000016 F36F 5196       BFC              r1, #22, #1
   38 0000001A F041 0100       ORR              r1, r1, #(0<<22) ;No division f
                                                            or system clock. Th
                                                            is line is for clar
                                                            ity
   39 0000001E         
   40 0000001E 6601            STR              r1,[r0, #RCC]
   41 00000020         
   42 00000020         ;restore context
   43 00000020 E8BD 4010       POP              {r4, LR}
   44 00000024 4770            BX               LR
   45 00000026         
   46 00000026                 ENDP
   47 00000026         
   48 00000026         ;This function initiates the stack by subtracting sp by 
                       the total number 
   49 00000026         ;of words needed to fill in all registers. The stack loc



ARM Macro Assembler    Page 5 


                       ation for PC is
   50 00000026         ;stored with the threads task location. xPSR not needed.
                       
   51 00000026         ;r0 = numThreads (THREADSIZE)
   52 00000026         OS_InitStack
                               PROC
   53 00000026                 EXPORT           OS_InitStack
   54 00000026         
   55 00000026         ;Save context
   56 00000026 B510            PUSH             {r4, LR}
   57 00000028         
   58 00000028 494D            LDR              r1,=tcbsArray ;Loading the task
                                                             from the tcbsArray
                                                            
   59 0000002A         
   60 0000002A F04F 0400       MOV              r4, #0
   61 0000002E 42A0    loop    CMP              r0, r4
   62 00000030 D008            BEQ              endloop
   63 00000032 B082            SUB              sp, #8      ;This is where task
                                                             will be saved, in 
                                                            PC slot of stack
   64 00000034         
   65 00000034         ;Store task from TCB to PC slot in stack
   66 00000034 F8D1 D008       LDR              sp, [r1,#8] ;offset of 8 to rea
                                                            ch task in TCB
   67 00000038 F101 0120       ADD              r1, #32     ; assuming each dat
                                                            a in tcb is 32 bits
                                                            , total is 32 words
                                                             in RAM for next tc
                                                            b. tcbsArray[i], i 
                                                            = 1, 2, 3, ...
   68 0000003C         
   69 0000003C B08E            SUB              sp, #56
   70 0000003E F1A4 0401       SUB              r4, #1
   71 00000042 E7F4            B                loop
   72 00000044 BD10    endloop POP              {r4, PC}
   73 00000046         
   74 00000046                 ENDP
   75 00000046         
   76 00000046         ;This function initiates SysTick, the mechanism used to 
                       perform the context switch.
   77 00000046         ;It sets the base frequency to 1ms.
   78 00000046         OS_InitContextSwitcher
                               PROC
   79 00000046                 EXPORT           OS_InitContextSwitcher
   80 00000046         
   81 00000046         ;Push LR onto stack first
   82 00000046 B510            PUSH             {r4, LR}
   83 00000048         
   84 00000048         ;RCC used to etsablish base clock
   85 00000048         
   86 00000048         ;Clear ENABLE bit. STCTRL
   87 00000048 F04F 20E0       LDR              r0, =SYS_PERIPH
   88 0000004C 6901            LDR              r1, [r0,#STCTRL]
   89 0000004E F001 0100       AND              r1, r1, #0  ;Clear bit 0
   90 00000052 6101            STR              r1, [r0, #STCTRL]
   91 00000054         
   92 00000054         ;Set reload value. STRELOAD
   93 00000054 F04F 20E0       LDR              r0, =SYS_PERIPH



ARM Macro Assembler    Page 6 


   94 00000058 6941            LDR              r1, [r0,#STRELOAD]
   95 0000005A F041 0120       ORR              r1, r1, #(1<<5) ;23) ;Set inter
                                                            rupt period here
   96 0000005E 6141            STR              r1, [r0,#STRELOAD]
   97 00000060         
   98 00000060         ;Clear timer and interrupt flag. STCURRENT
   99 00000060 F04F 20E0       LDR              r0, =SYS_PERIPH
  100 00000064 6981            LDR              r1, [r0,#STCURRENT]
  101 00000066 F041 0101       ORR              r1, r1, #1  ;Write any value to
                                                             reset
  102 0000006A 6181            STR              r1, [r0,#STCURRENT]
  103 0000006C         ;LDR r1, [r0,#STCURRENT]
  104 0000006C         
  105 0000006C         
  106 0000006C         ;Set CLK_SRC bit to use the system clock (look at InitCl
                       ock). STCTRL
  107 0000006C F04F 20E0       LDR              r0, =SYS_PERIPH
  108 00000070 6901            LDR              r1, [r0,#STCTRL]
  109 00000072 F36F 0182       BFC              r1, #2, #1
  110 00000076 F041 0104       ORR              r1, r1, #(1<<2) ;bit 2
  111 0000007A 6101            STR              r1, [r0,#STCTRL]
  112 0000007C         
  113 0000007C         ;Set INTEN bit to enable interrupts. STCTRL
  114 0000007C F04F 20E0       LDR              r0, =SYS_PERIPH
  115 00000080 6901            LDR              r1, [r0,#STCTRL]
  116 00000082 F041 0102       ORR              r1, r1, #(1<<1) ;bit 1
  117 00000086 6101            STR              r1, [r0,#STCTRL]
  118 00000088         
  119 00000088         ;Set TICK priority field. SYSPRI3
  120 00000088 F04F 20E0       LDR              r0, =SYS_PERIPH
  121 0000008C F8D0 1D20       LDR              r1, [r0,#SYSPRI3]
  122 00000090 F041 5100       ORR              r1, r1, #(1<<29) ;priority 1. T
                                                            ICK begins at bit 2
                                                            9
  123 00000094 F8C0 1D20       STR              r1, [r0,#SYSPRI3]
  124 00000098         
  125 00000098         ;Set ENABLE bit to turn SysTick on again. STCTRL
  126 00000098 F04F 20E0       LDR              r0, =SYS_PERIPH
  127 0000009C 6901            LDR              r1, [r0,#STCTRL]
  128 0000009E F041 0101       ORR              r1, r1, #1  ;bit 0
  129 000000A2 6101            STR              r1, [r0,#STCTRL]
  130 000000A4         
  131 000000A4         
  132 000000A4         ;Restore context
  133 000000A4 E8BD 4010       POP              {r4, LR}
  134 000000A8 4770            BX               LR
  135 000000AA         
  136 000000AA                 ENDP
  137 000000AA         
  138 000000AA         ;This function starts the RTOS by loading the context of
                        the first
  139 000000AA         ;thread
  140 000000AA         OS_Launch
                               PROC
  141 000000AA                 EXPORT           OS_Launch
  142 000000AA         
  143 000000AA         ;Get SP to the first tcb and load into SP register
  144 000000AA 482E            LDR              r0, =RunThread
  145 000000AC 6801            LDR              r1, [r0]



ARM Macro Assembler    Page 7 


  146 000000AE F8D1 D000       LDR              sp, [r1]
  147 000000B2         
  148 000000B2         ;Pop the context
  149 000000B2 E8BD 0FF0       POP              {r4-r11}
  150 000000B6 BC0F            POP              {r0-r3}
  151 000000B8 F85D CB04       POP              {r12}
  152 000000BC F85D EB04       POP              {r14}
  153 000000C0 BD00            POP              {r15}
  154 000000C2         
  155 000000C2         ;Ignore xPSR (r"16", right after PC r15)
  156 000000C2 B001            ADD              sp, sp, #4
  157 000000C4         
  158 000000C4         ;Reenable interrupts
  159 000000C4 F7FF FFFE       BL               OS_EnableInterrupts
  160 000000C8         
  161 000000C8 4770            BX               LR
  162 000000CA         
  163 000000CA                 ENDP
  164 000000CA         
  165 000000CA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
  166 000000CA         ;;;;;;     Synch functions        ;;;;;;;;;;;;;;;;;;
  167 000000CA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
  168 000000CA         
  169 000000CA         ;This function is used to disable interrupts. Use it for
                        large critical sections without
  170 000000CA         ;a shared resource
  171 000000CA         OS_DisableInterrupts
                               PROC
  172 000000CA                 EXPORT           OS_DisableInterrupts
  173 000000CA         
  174 000000CA         ;Save context
  175 000000CA B510            PUSH             {r4, LR}
  176 000000CC         
  177 000000CC         ;CPSID I
  178 000000CC 2001            MOVS             r0, #1
  179 000000CE F380 8810       MSR              PRIMASK, r0
  180 000000D2         
  181 000000D2         ;Restore context
  182 000000D2 E8BD 4010       POP              {r4, LR}
  183 000000D6 4770            BX               LR
  184 000000D8         
  185 000000D8                 ENDP
  186 000000D8         
  187 000000D8         ;This function is used to enable interrupts after disabl
                       ing them. Use this when you use 
  188 000000D8         ;OS_DisableInterrupts
  189 000000D8         OS_EnableInterrupts
                               PROC
  190 000000D8                 EXPORT           OS_EnableInterrupts
  191 000000D8         
  192 000000D8         ;Save context
  193 000000D8 B510            PUSH             {r4, LR}
  194 000000DA         
  195 000000DA         ;CPSIE I
  196 000000DA 2000            MOVS             r0, #0
  197 000000DC F380 8810       MSR              PRIMASK, r0
  198 000000E0         



ARM Macro Assembler    Page 8 


  199 000000E0         ;Restore context
  200 000000E0 E8BD 4010       POP              {r4, LR}
  201 000000E4 4770            BX               LR
  202 000000E6         
  203 000000E6                 ENDP
  204 000000E6         
  205 000000E6         ;This function is used to disable interrupts. Use this f
                       or critical sections that
  206 000000E6         ;share resources. Start of Critical Section
  207 000000E6         ;r0 (return value) = PRIMASK (reenables interrupts later
                       )
  208 000000E6         OS_CriticalSectionS
                               PROC
  209 000000E6                 EXPORT           OS_CriticalSectionS
  210 000000E6         
  211 000000E6         ;Save context
  212 000000E6 B510            PUSH             {r4, LR}
  213 000000E8         
  214 000000E8 F3EF 8010       MRS              r0, PRIMASK
  215 000000EC         ;CPSID I
  216 000000EC         
  217 000000EC F7FF FFFE       BL               OS_DisableInterrupts
  218 000000F0         
  219 000000F0         ;Restore context
  220 000000F0 E8BD 4010       POP              {r4, LR}
  221 000000F4 4770            BX               LR
  222 000000F6         
  223 000000F6                 ENDP
  224 000000F6         
  225 000000F6         ;This function is used to enable interrpts. Use it after
                        using OS_CriticalSection
  226 000000F6         ;End of critical section
  227 000000F6         ;r0 (input) = PRIMASK value from OS_CriticalSectionS
  228 000000F6         OS_CriticalSectionE
                               PROC
  229 000000F6                 EXPORT           OS_CriticalSectionE
  230 000000F6         
  231 000000F6         ;Save context
  232 000000F6 B510            PUSH             {r4, LR}
  233 000000F8         
  234 000000F8 F380 8810       MSR              PRIMASK, r0
  235 000000FC         
  236 000000FC         ;Restore context
  237 000000FC E8BD 4010       POP              {r4, LR}
  238 00000100 4770            BX               LR
  239 00000102         
  240 00000102                 ENDP
  241 00000102         
  242 00000102         ;This function is used to initialize the semaphore. Pass
                        the define value in OS.h to initialize it
  243 00000102         ;properly. They are basically the reason you are using t
                       he semaphore.
  244 00000102         ;r0 (input) = TO_COMPLETION (0), or THREAD_SYNC (1), or 
                       MAILBOX (2)
  245 00000102         ;r0 (return value) = value for semaphore
  246 00000102         OS_SemaphoreInit
                               PROC
  247 00000102                 EXPORT           OS_SemaphoreInit
  248 00000102         



ARM Macro Assembler    Page 9 


  249 00000102         ;Save context
  250 00000102 B510            PUSH             {r4, LR}
  251 00000104         
  252 00000104 F000 0203       AND              r2, r0, #3  ;Mask value so ther
                                                            e are only 2 valid 
                                                            bits for 0~2
  253 00000108         
  254 00000108 E8DF F002       TBB              [pc,r2]
  255 0000010C         BranchTable
  256 0000010C 02              DCB              (Case_0 - BranchTable)/2 
                                                            ;TO_COMPLETION
  257 0000010D 07              DCB              (Case_1 - BranchTable)/2 
                                                            ;THREAD_SYNC
  258 0000010E 0C              DCB              (Case_2 - BranchTable)/2 
                                                            ;MAILBOX
  259 0000010F 00              ALIGN
  260 00000110         
  261 00000110         Case_0
  262 00000110 F000 0000       AND              r0, r0, #0
  263 00000114 F040 0001       ORR              r0, r0, #1
  264 00000118 E009            B                exit
  265 0000011A         Case_1
  266 0000011A F000 0000       AND              r0, r0, #0
  267 0000011E F040 0000       ORR              r0, r0, #0
  268 00000122 E004            B                exit
  269 00000124         Case_2
  270 00000124 F000 0000       AND              r0, r0, #0
  271 00000128 F040 0000       ORR              r0, r0, #0
  272 0000012C E7FF            B                exit
  273 0000012E         
  274 0000012E         exit                                 ;restore context
  275 0000012E E8BD 4010       POP              {r4, LR}
  276 00000132 4770            BX               LR
  277 00000134         
  278 00000134                 ENDP
  279 00000134         
  280 00000134         
  281 00000134         ;This function is used to lock non-reentrant code. Use t
                       his when you need to synchronize your code
  282 00000134         ;eg. synchronize sharing resources, eg. 
  283 00000134         ;r0 (input) = the semaphore (it's basically just a count
                       er)
  284 00000134         OS_SemaphoreWait
                               PROC
  285 00000134                 EXPORT           OS_SemaphoreWait
  286 00000134         
  287 00000134         ;Load value of semaphore. 
  288 00000134         ;If it's 0, semphaore is locked and spins
  289 00000134         ;If it's 1, sempahore is unlocked and released
  290 00000134 E850 1F00       LDREX            r1,[r0]
  291 00000138 2901            CMP              r1, #1
  292 0000013A         
  293 0000013A BF02            ITTT             EQ
  294 0000013C 3901            SUBEQ            r1, #1
  295 0000013E E840 1200       STREXEQ          r2,r1,[r0]  ;if r2 = 0, then st
                                                            ore succeeded. Othe
                                                            rwise repeat
  296 00000142 2A00            CMPEQ            r2, #0
  297 00000144         



ARM Macro Assembler    Page 10 


  298 00000144 D1FE            BNE              OS_SemaphoreWait
  299 00000146         
  300 00000146 4770            BX               LR
  301 00000148         
  302 00000148                 ENDP
  303 00000148         
  304 00000148         ;This function is used to unlock non-reentrant code. Use
                        this when you need to synchronize your code
  305 00000148         ;
  306 00000148         ;r0 (input) = the semaphore (its basically just a counte
                       r)
  307 00000148         OS_SemaphoreSignal
                               PROC
  308 00000148                 EXPORT           OS_SemaphoreSignal
  309 00000148         
  310 00000148         ;Load the counter and add 1
  311 00000148 E850 1F00       LDREX            r1,[r0]
  312 0000014C F101 0101       ADD              r1, #1
  313 00000150 E840 1200       STREX            r2, r1, [r0] ;If r2 = 0, store 
                                                            succeeded. Otherwis
                                                            e, repeat.
  314 00000154 2A00            CMP              r2, #0
  315 00000156 D1FE            BNE              OS_SemaphoreSignal
  316 00000158         
  317 00000158 4770            BX               LR
  318 0000015A         
  319 0000015A                 ENDP
  320 0000015A         
  321 0000015A                 END
              00 00 400FE000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\os_1.d -o.\objects\os_1.o -IC:\ti\TivaWare_C_Series-2
.1.4.178\examples\boards\my_projects\TM4C123GX-OS-RR\RTE -IC:\Keil_v5\ARM\PACK\
Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\ARM\CMSIS\Include --pre
define="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 521" --predefine="TM
4C123GH6PM SETA 1" --list=.\listings\os.lst OS.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

oscode 00000000

Symbol: oscode
   Definitions
      At line 1 in file OS.s
   Uses
      None
Comment: oscode unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BranchTable 0000010C

Symbol: BranchTable
   Definitions
      At line 255 in file OS.s
   Uses
      At line 256 in file OS.s
      At line 257 in file OS.s
      At line 258 in file OS.s

Case_0 00000110

Symbol: Case_0
   Definitions
      At line 261 in file OS.s
   Uses
      At line 256 in file OS.s
Comment: Case_0 used once
Case_1 0000011A

Symbol: Case_1
   Definitions
      At line 265 in file OS.s
   Uses
      At line 257 in file OS.s
Comment: Case_1 used once
Case_2 00000124

Symbol: Case_2
   Definitions
      At line 269 in file OS.s
   Uses
      At line 258 in file OS.s
Comment: Case_2 used once
My_Constants 00000000

Symbol: My_Constants
   Definitions
      At line 1 in file my_Constants.s
   Uses
      None
Comment: My_Constants unused
OS_CriticalSectionE 000000F6

Symbol: OS_CriticalSectionE
   Definitions
      At line 228 in file OS.s
   Uses
      At line 229 in file OS.s
Comment: OS_CriticalSectionE used once
OS_CriticalSectionS 000000E6

Symbol: OS_CriticalSectionS
   Definitions
      At line 208 in file OS.s
   Uses
      At line 209 in file OS.s
Comment: OS_CriticalSectionS used once
OS_DisableInterrupts 000000CA



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: OS_DisableInterrupts
   Definitions
      At line 171 in file OS.s
   Uses
      At line 172 in file OS.s
      At line 217 in file OS.s

OS_EnableInterrupts 000000D8

Symbol: OS_EnableInterrupts
   Definitions
      At line 189 in file OS.s
   Uses
      At line 159 in file OS.s
      At line 190 in file OS.s

OS_InitClock 00000000

Symbol: OS_InitClock
   Definitions
      At line 16 in file OS.s
   Uses
      At line 17 in file OS.s
Comment: OS_InitClock used once
OS_InitContextSwitcher 00000046

Symbol: OS_InitContextSwitcher
   Definitions
      At line 78 in file OS.s
   Uses
      At line 79 in file OS.s
Comment: OS_InitContextSwitcher used once
OS_InitStack 00000026

Symbol: OS_InitStack
   Definitions
      At line 52 in file OS.s
   Uses
      At line 53 in file OS.s
Comment: OS_InitStack used once
OS_Launch 000000AA

Symbol: OS_Launch
   Definitions
      At line 140 in file OS.s
   Uses
      At line 141 in file OS.s
Comment: OS_Launch used once
OS_SemaphoreInit 00000102

Symbol: OS_SemaphoreInit
   Definitions
      At line 246 in file OS.s
   Uses
      At line 247 in file OS.s
Comment: OS_SemaphoreInit used once
OS_SemaphoreSignal 00000148




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: OS_SemaphoreSignal
   Definitions
      At line 307 in file OS.s
   Uses
      At line 308 in file OS.s
      At line 315 in file OS.s

OS_SemaphoreWait 00000134

Symbol: OS_SemaphoreWait
   Definitions
      At line 284 in file OS.s
   Uses
      At line 285 in file OS.s
      At line 298 in file OS.s

endloop 00000044

Symbol: endloop
   Definitions
      At line 72 in file OS.s
   Uses
      At line 62 in file OS.s
Comment: endloop used once
exit 0000012E

Symbol: exit
   Definitions
      At line 274 in file OS.s
   Uses
      At line 264 in file OS.s
      At line 268 in file OS.s
      At line 272 in file OS.s

loop 0000002E

Symbol: loop
   Definitions
      At line 61 in file OS.s
   Uses
      At line 71 in file OS.s
Comment: loop used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

AHB_PORTA 40058000

Symbol: AHB_PORTA
   Definitions
      At line 8 in file my_Constants.s
   Uses
      None
Comment: AHB_PORTA unused
AHB_PORTB 40059000

Symbol: AHB_PORTB
   Definitions
      At line 7 in file my_Constants.s
   Uses
      None
Comment: AHB_PORTB unused
FAIL 00000000

Symbol: FAIL
   Definitions
      At line 78 in file my_Constants.s
   Uses
      None
Comment: FAIL unused
GPIOAFSEL 00000420

Symbol: GPIOAFSEL
   Definitions
      At line 25 in file my_Constants.s
   Uses
      None
Comment: GPIOAFSEL unused
GPIOCTL 0000052C

Symbol: GPIOCTL
   Definitions
      At line 23 in file my_Constants.s
   Uses
      None
Comment: GPIOCTL unused
GPIODATAPB5 00000080

Symbol: GPIODATAPB5
   Definitions
      At line 30 in file my_Constants.s
   Uses
      None
Comment: GPIODATAPB5 unused
GPIODEN 0000051C

Symbol: GPIODEN
   Definitions
      At line 28 in file my_Constants.s
   Uses
      None
Comment: GPIODEN unused
GPIODIR 00000400

Symbol: GPIODIR



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 24 in file my_Constants.s
   Uses
      None
Comment: GPIODIR unused
GPIODR2R 00000500

Symbol: GPIODR2R
   Definitions
      At line 26 in file my_Constants.s
   Uses
      None
Comment: GPIODR2R unused
GPIOHBCTL 0000006C

Symbol: GPIOHBCTL
   Definitions
      At line 22 in file my_Constants.s
   Uses
      None
Comment: GPIOHBCTL unused
GPIOP5 00000020

Symbol: GPIOP5
   Definitions
      At line 81 in file my_Constants.s
   Uses
      None
Comment: GPIOP5 unused
GPIOPCTL 0000052C

Symbol: GPIOPCTL
   Definitions
      At line 29 in file my_Constants.s
   Uses
      None
Comment: GPIOPCTL unused
GPIOPUR 00000510

Symbol: GPIOPUR
   Definitions
      At line 27 in file my_Constants.s
   Uses
      None
Comment: GPIOPUR unused
GPTMCFG 00000000

Symbol: GPTMCFG
   Definitions
      At line 44 in file my_Constants.s
   Uses
      None
Comment: GPTMCFG unused
GPTMCTL 0000000C

Symbol: GPTMCTL
   Definitions
      At line 43 in file my_Constants.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      None
Comment: GPTMCTL unused
GPTMICR 00000024

Symbol: GPTMICR
   Definitions
      At line 53 in file my_Constants.s
   Uses
      None
Comment: GPTMICR unused
GPTMIMR 00000018

Symbol: GPTMIMR
   Definitions
      At line 51 in file my_Constants.s
   Uses
      None
Comment: GPTMIMR unused
GPTMMIS 00000020

Symbol: GPTMMIS
   Definitions
      At line 58 in file my_Constants.s
   Uses
      None
Comment: GPTMMIS unused
GPTMRIS 0000001C

Symbol: GPTMRIS
   Definitions
      At line 52 in file my_Constants.s
   Uses
      None
Comment: GPTMRIS unused
GPTMTAILR 00000028

Symbol: GPTMTAILR
   Definitions
      At line 47 in file my_Constants.s
   Uses
      None
Comment: GPTMTAILR unused
GPTMTAMR 00000004

Symbol: GPTMTAMR
   Definitions
      At line 45 in file my_Constants.s
   Uses
      None
Comment: GPTMTAMR unused
GPTMTAPR 00000038

Symbol: GPTMTAPR
   Definitions
      At line 49 in file my_Constants.s
   Uses
      None
Comment: GPTMTAPR unused
GPTMTAR 00000048



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


Symbol: GPTMTAR
   Definitions
      At line 56 in file my_Constants.s
   Uses
      None
Comment: GPTMTAR unused
GPTMTAV 00000050

Symbol: GPTMTAV
   Definitions
      At line 54 in file my_Constants.s
   Uses
      None
Comment: GPTMTAV unused
GPTMTBILR 0000002C

Symbol: GPTMTBILR
   Definitions
      At line 48 in file my_Constants.s
   Uses
      None
Comment: GPTMTBILR unused
GPTMTBMR 00000008

Symbol: GPTMTBMR
   Definitions
      At line 46 in file my_Constants.s
   Uses
      None
Comment: GPTMTBMR unused
GPTMTBPR 0000003C

Symbol: GPTMTBPR
   Definitions
      At line 50 in file my_Constants.s
   Uses
      None
Comment: GPTMTBPR unused
GPTMTBR 0000004C

Symbol: GPTMTBR
   Definitions
      At line 57 in file my_Constants.s
   Uses
      None
Comment: GPTMTBR unused
GPTMTBV 00000054

Symbol: GPTMTBV
   Definitions
      At line 55 in file my_Constants.s
   Uses
      None
Comment: GPTMTBV unused
NVIC_DISn 00000180

Symbol: NVIC_DISn
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 40 in file my_Constants.s
   Uses
      None
Comment: NVIC_DISn unused
NVIC_ENn 00000100

Symbol: NVIC_ENn
   Definitions
      At line 39 in file my_Constants.s
   Uses
      None
Comment: NVIC_ENn unused
NVIC_PRIn 00000440

Symbol: NVIC_PRIn
   Definitions
      At line 41 in file my_Constants.s
   Uses
      None
Comment: NVIC_PRIn unused
RCC 00000060

Symbol: RCC
   Definitions
      At line 37 in file my_Constants.s
   Uses
      At line 23 in file OS.s
      At line 40 in file OS.s

RCGCGPIO 00000608

Symbol: RCGCGPIO
   Definitions
      At line 18 in file my_Constants.s
   Uses
      None
Comment: RCGCGPIO unused
RCGCTIMER 00000604

Symbol: RCGCTIMER
   Definitions
      At line 19 in file my_Constants.s
   Uses
      None
Comment: RCGCTIMER unused
RCGCUART 00000618

Symbol: RCGCUART
   Definitions
      At line 20 in file my_Constants.s
   Uses
      None
Comment: RCGCUART unused
SIZE 00000010

Symbol: SIZE
   Definitions
      At line 76 in file my_Constants.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      None
Comment: SIZE unused
STCTRL 00000010

Symbol: STCTRL
   Definitions
      At line 32 in file my_Constants.s
   Uses
      At line 88 in file OS.s
      At line 90 in file OS.s
      At line 108 in file OS.s
      At line 111 in file OS.s
      At line 115 in file OS.s
      At line 117 in file OS.s
      At line 127 in file OS.s
      At line 129 in file OS.s

STCURRENT 00000018

Symbol: STCURRENT
   Definitions
      At line 34 in file my_Constants.s
   Uses
      At line 100 in file OS.s
      At line 102 in file OS.s

STRELOAD 00000014

Symbol: STRELOAD
   Definitions
      At line 33 in file my_Constants.s
   Uses
      At line 94 in file OS.s
      At line 96 in file OS.s

SUCCESS 00000001

Symbol: SUCCESS
   Definitions
      At line 77 in file my_Constants.s
   Uses
      None
Comment: SUCCESS unused
SYSPRI3 00000D20

Symbol: SYSPRI3
   Definitions
      At line 35 in file my_Constants.s
   Uses
      At line 121 in file OS.s
      At line 123 in file OS.s

SYS_CONTROL 400FE000

Symbol: SYS_CONTROL
   Definitions
      At line 9 in file my_Constants.s
   Uses
      At line 22 in file OS.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

Comment: SYS_CONTROL used once
SYS_PERIPH E000E000

Symbol: SYS_PERIPH
   Definitions
      At line 10 in file my_Constants.s
   Uses
      At line 87 in file OS.s
      At line 93 in file OS.s
      At line 99 in file OS.s
      At line 107 in file OS.s
      At line 114 in file OS.s
      At line 120 in file OS.s
      At line 126 in file OS.s

TIMER16_0 40030000

Symbol: TIMER16_0
   Definitions
      At line 11 in file my_Constants.s
   Uses
      None
Comment: TIMER16_0 unused
TIMER16_4 40034000

Symbol: TIMER16_4
   Definitions
      At line 12 in file my_Constants.s
   Uses
      None
Comment: TIMER16_4 unused
UART0 4000C000

Symbol: UART0
   Definitions
      At line 13 in file my_Constants.s
   Uses
      None
Comment: UART0 unused
UART1 4000D000

Symbol: UART1
   Definitions
      At line 14 in file my_Constants.s
   Uses
      None
Comment: UART1 unused
UARTCC 00000FC8

Symbol: UARTCC
   Definitions
      At line 60 in file my_Constants.s
   Uses
      None
Comment: UARTCC unused
UARTCTL 00000030

Symbol: UARTCTL
   Definitions



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

      At line 61 in file my_Constants.s
   Uses
      None
Comment: UARTCTL unused
UARTDR 00000000

Symbol: UARTDR
   Definitions
      At line 72 in file my_Constants.s
   Uses
      None
Comment: UARTDR unused
UARTFBRD 00000028

Symbol: UARTFBRD
   Definitions
      At line 63 in file my_Constants.s
   Uses
      None
Comment: UARTFBRD unused
UARTFR 00000018

Symbol: UARTFR
   Definitions
      At line 65 in file my_Constants.s
   Uses
      None
Comment: UARTFR unused
UARTIBRD 00000024

Symbol: UARTIBRD
   Definitions
      At line 62 in file my_Constants.s
   Uses
      None
Comment: UARTIBRD unused
UARTICR 00000044

Symbol: UARTICR
   Definitions
      At line 71 in file my_Constants.s
   Uses
      None
Comment: UARTICR unused
UARTIFLS 00000034

Symbol: UARTIFLS
   Definitions
      At line 67 in file my_Constants.s
   Uses
      None
Comment: UARTIFLS unused
UARTIM 00000038

Symbol: UARTIM
   Definitions
      At line 69 in file my_Constants.s
   Uses
      None



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols

Comment: UARTIM unused
UARTLCRH 0000002C

Symbol: UARTLCRH
   Definitions
      At line 64 in file my_Constants.s
   Uses
      None
Comment: UARTLCRH unused
UARTMIS 00000040

Symbol: UARTMIS
   Definitions
      At line 70 in file my_Constants.s
   Uses
      None
Comment: UARTMIS unused
UARTRIS 0000003C

Symbol: UARTRIS
   Definitions
      At line 68 in file my_Constants.s
   Uses
      None
Comment: UARTRIS unused
UARTRSR 00000004

Symbol: UARTRSR
   Definitions
      At line 66 in file my_Constants.s
   Uses
      None
Comment: UARTRSR unused
61 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RunThread 00000000

Symbol: RunThread
   Definitions
      At line 8 in file OS.s
   Uses
      At line 144 in file OS.s
Comment: RunThread used once
tcbsArray 00000000

Symbol: tcbsArray
   Definitions
      At line 7 in file OS.s
   Uses
      At line 58 in file OS.s
Comment: tcbsArray used once
2 symbols
419 symbols in table
